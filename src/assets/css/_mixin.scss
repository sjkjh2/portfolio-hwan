@mixin menuOpenBar($translate, $value, $aniDelay) {
  transform: $translate;
  animation-delay: $aniDelay;
  animation-duration: 0.6s;
  animation-fill-mode: forwards;
  animation-timing-function: $transBounce;

  @if ($value == 'top') {
    animation-name: menuOpenBarTop;
  }
  
  @if ($value == 'middle') {
    animation-name: menuOpenBarMiddle;
  }

  @if ($value == 'bottom') {
    animation-name: menuOpenBarBottom;
  }
}

@mixin menuCloseBar($aniDelay, $value) {
  animation-delay: $aniDelay;
  animation-duration: 1s;
  animation-fill-mode: forwards;
  animation-timing-function: $transBounce;

  @if ($value == 'row') {
    animation-name: menuCloseBarRow;
  }

  @if ($value == 'col') {
    animation-name: menuCloseBarCol;
  }
}

@mixin mixTransition($properties...) {
  $transitions: '';

  @each $property in $properties {
    $property-name: map-get($property, 'property');
    $duration: map-get($property, 'duration');
    $timing: map-get($property, 'timing');
    $delay: map-get($property, 'delay');

    // 첫 번째 속성이 아닌 경우에만 쉼표를 추가
    @if $transitions != '' {
      $transitions: #{$transitions}, #{$property-name} #{$duration} #{$timing} #{$delay};
    } @else {
      $transitions: #{$property-name} #{$duration} #{$timing} #{$delay};
    }
  }

  transition: $transitions;
  @content;
}

@mixin background($repeat: no-repeat, $image: null, $position: left top, $size: 100% auto, $color: null) {
  background-repeat: $repeat;
  background-image: $image;
  background-position: $position;
  background-size: $size;
  background-color: $color;
  @content;
}

@mixin btnRound(
    $display: inline-flex, 
    $paddingSide: 3.5rem, 
    $height: 6rem, 
    $bdColor: $color000, 
    $bgColor: $colorfff, 
    $arrSize: 1rem,
    $arrRight: 1.7rem,
    $function: $transBounce
  ) {
  display: $display;
  align-items: center;
  justify-content: center;
  position: relative;
  padding: 0 $paddingSide;
  height: $height;
  border-radius: 4rem;
  transition: padding 0.3s $function;
  
  @content;

  &::before, 
  &::after {
    content: "";
    display: inline-block;
    position: absolute;
    top: 50%;
    transition-timing-function: $function;
  }

  &::before {
    right: 0;
    transform: translateY(-50%);
    width: 100%;
    height: 100%;
    border-radius: 4rem;
    border: 1px solid $bdColor;
    transition-property: width, height, background-color;
    transition-duration: 0.3s;
    transition-delay: 0s, 0s, 0.1s;
    
  }
  &::after {
    right: $arrRight;
    transform: translate3d(-100%, -50%, 0) rotate(45deg);
    width: $arrSize;
    height: $arrSize;
    border-top: 2px solid $colorfff;
    border-right: 2px solid $colorfff;
    opacity: 0;
    transition-property: transform, opacity;
    transition-duration: 0.2s;
    transition-delay: 0.2s;
  }
  &:hover {
    @include btnRoundHover($paddingSide, $height);
  }
}

@mixin btnRoundHover($paddingSide, $height) {
  padding: 0 calc(#{$paddingSide} * 1.5) 0 0;
  &::before {
    width: calc(#{$height} * 0.7);
    height: calc(#{$height} * 0.7);;
    background-color: $color000;
  }
  &::after {
    transform: translate3d(0, -50%, 0) rotate(45deg);
    opacity: 1;
  }
}

@mixin btnUnderline($pdbottom: 0.5rem, $bgColor: $color000) {
  position: relative;
  padding-bottom: $pdbottom;
  
  @content;

  &__bar {
    @include btnUnderlineBar($bgColor);
  }

  &:hover {
    .btn-underline__bar {
      @include btnUnderlineBarHover();
    }
  }
}

@mixin btnUnderlineBar($bgColor) {
  overflow: hidden;
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 1px;

  &::before,
  &::after {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: $bgColor;
  }

  &::before {
    transform: translate3d(0, 0, 0);
  }

  &::after {
    transform: translate3d(-200%, 0, 0);
  }
}

@mixin btnUnderlineBarHover() {
  &::before {
    animation-name: btnUnderlineBefore;
    animation-duration: 0.3s;
    animation-fill-mode: forwards;
    animation-timing-function: linear;
  }
  &::after {
    animation-name: btnUnderlineAfter;
    animation-duration: 0.4s;
    animation-fill-mode: forwards;
    animation-timing-function: $transBounce;
    animation-delay: 0.3s;
  }
}

@mixin autoSlider(
    $width: 16rem, 
    $height: 16rem, 
    $paddingCol: 5rem, 
    $quantity: null, 
    $duration: 20s, 
    $reverse: false
  ) {
  overflow: hidden;
  display: flex;
  position: relative;
  width: 100%;
  height: calc($height + ($paddingCol * 3));
  padding: $paddingCol 0 calc($paddingCol * 2);

  &:hover .stack__item {
    animation-play-state: paused;
    filter: grayscale(1);

    &-flag {
      color: $colora3a3a3;
    }
  }
  
  .stack__item {
    filter: grayscale(0);
    transition-property: filter;
    transition-duration: 0.2s;
    transition-timing-function: ease-in-out;

    @include autoSliderItem($width, $height, $quantity, $duration, $reverse);

    &-logo {
      position: relative;
      transform: perspective(20rem) rotateY(0) scale(0.8);
      z-index: 1;
      transition-property: filter, transform;
      transition-duration: 0.3s, 0.5s;
      transition-timing-function: $transBounce;
      backface-visibility: hidden;
    }

    &-flag {
      position: absolute;
      left: 50%;
      bottom: 0;
      transform: translate3d(-50%, 120%, 0) scale(1);
      background-color: $colorfff;
      color: $color333;
      font-weight: 600;
      font-size: 2rem;
      transition-property: transform, color;
      transition-duration: 0.3s;
      transition-timing-function: $transBounce;
      white-space: nowrap;
      
    }

    &:hover {
      filter: grayscale(0);

      .stack__item-logo {
        transform: perspective(50rem) rotateY(360deg) scale(1);
      }

      .stack__item-flag {
        color: $color333;
        transform: translate3d(-50%, 140%, 0) scale(1.3);
      }
    }
  }
}

@mixin autoSliderItem($width, $height, $quantity, $duration, $reverse) {
  position: absolute;
  width: $width;
  height: $height;
  animation-duration: $duration;
  animation-timing-function: linear;
  animation-iteration-count: infinite;

  @if $reverse == true {
    left: -100%;
    animation-name: reverseAutoRun;
  } @else {
    left: 100%;
    animation-name: autoRun;
  }

  @for $i from 1 through $quantity {
    &:nth-child(#{$i}) {
      animation-delay: calc( ($duration / $quantity) * ($i - 1) - $duration) !important;
    }
  }
}
